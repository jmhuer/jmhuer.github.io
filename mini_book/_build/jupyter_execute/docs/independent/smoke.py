#!/usr/bin/env python
# coding: utf-8

# ##  CycleGAN for Synthetic Image Generation
# 
#  <sub> <a href="https://jmhuer.github.io/mini_book/_build/html/docs/portfolio.html" style="color: red; text-decoration: underline;text-decoration-style: dotted;">‚Üê Back to Projects</a> </sub>
# 
# <img src="../../../../images/smoke.png" align="center"/>
# 
# <br>
# 
# Collecting data can be expensive and in certain use cases dangerous to acquire. One such example is smoke data. There are many applications relevant to smoke detection with a camera. To skip the data collection stage we create a synthetic dataset of smoky images..
# <br>
# 
# 
# The Full repository for generation and classification is available here: [smoke-cyclegan-repository](https://github.com/patel996/smoke-detection)
# 
# ## Synthetic data
# ---
# 
# Synthetic data is information that's artificially manufactured rather than generated by real-world events. Synthetic data is created algorithmically, and it is used as a stand-in for test datasets of production or operational data, to validate mathematical models and, increasingly, to train machine learning models.
# 
# There are a few different ways to generate synthetic data. One possibility is to generate a full new image based on a set of examples. In this post we are exploring image alterations NOT full generation.
# 
# ## CycleGANs
# ---
# 
# To alter the images, we use  Cycle Generative Adversarial Network, or CycleGAN. This is an approach to training a deep convolutional neural network for image-to-image translation tasks. The Network learns mapping between input and output images using unpaired dataset.
# 
# <img src="../../../../images/cyclegan2.png" align="center"/>
# 
# The common example given is one in which we convert horses to zebras and vice versa
# 
# <img src="../../../../images/CycleGAN.jpeg" align="center"/>
# 
# <br>
# <br>
# 
# ## Synthetic data results
# ---
# 
# Below we have some randomly selected examples using a validation set:
# 
# <img src="../../../../images/smoke2.png" align="center"/>
# 
# <br>
# <br>
# 
# 
# ## Classifying smoky images
# ---
# 
# Pretrained Resnet-50 model is used to classify the smoky images from the non-smoky ones. It can be found in the Fire-Smoke-Detection folder, adapted from [smoke-detection-repository](https://github.com/imsaksham-c/Fire-Smoke-Detection) .
